<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[H5手机端开发问题汇总及解决方案]]></title>
      <url>https://yezihaohao.github.io/2018/03/30/H5%E6%89%8B%E6%9C%BA%E7%AB%AF%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>少侠，请留步，相见必是缘分，赠与你一部《踏坑秘籍》</p>
</blockquote>
<h3 id="扎马步"><a href="#扎马步" class="headerlink" title="扎马步"></a>扎马步</h3><h4 id="踏坑第一式"><a href="#踏坑第一式" class="headerlink" title="踏坑第一式"></a>踏坑第一式</h4><p><strong>ios竖屏拍照上传，图片被旋转问题</strong></p>
<p><strong>解决方案</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 几个步骤</span></div><div class="line"><span class="comment">// 1.通过第三方插件exif-js获取到图片的方向</span></div><div class="line"><span class="comment">// 2.new一个FileReader对象，加载读取上传的图片</span></div><div class="line"><span class="comment">// 3.在fileReader的onload函数中，得到的图片文件用一个Image对象接收</span></div><div class="line"><span class="comment">// 4.在image的onload函数中，利用步骤1中获取到的方向orientation，通过canvas旋转校正，重新绘制一张新图</span></div><div class="line"><span class="comment">// 注意iPhone有3个拍照方向需要处理，横屏拍摄，home键在左侧，竖屏拍摄，home建上下</span></div><div class="line"><span class="comment">// 5.将绘制的新图转成Blob对象，添加到FormData对象中，然后进行校正后的上传操作</span></div><div class="line"><span class="comment">// 代码有点杂，待整理后上传，网上应该是可以找到的</span></div></pre></td></tr></table></figure></p>
<h4 id="踏坑第二式"><a href="#踏坑第二式" class="headerlink" title="踏坑第二式"></a>踏坑第二式</h4><p><strong>ios：DOM元素固定一边，另一边滚动，滚动很卡的问题</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// (横向滚动用的多些)简单粗暴的办法，样式添加如下属性</div><div class="line">-webkit-overflow-scrolling: touch;</div></pre></td></tr></table></figure></p>
<h4 id="踏坑第三式"><a href="#踏坑第三式" class="headerlink" title="踏坑第三式"></a>踏坑第三式</h4><p><strong>部分手机第三方输入法会将页面网上挤的问题</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 特定需求页面，比如评论页面，输入框在顶部之类的</span></div><div class="line"><span class="keyword">const</span> interval = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.body.scrollTop = <span class="number">0</span>;</div><div class="line">&#125;, <span class="number">100</span>)</div><div class="line"><span class="comment">// 注意关闭页面或者销毁组件的时候记得清空定时器</span></div><div class="line">clearInterval(interval);</div></pre></td></tr></table></figure></p>
<h4 id="踏坑第四式"><a href="#踏坑第四式" class="headerlink" title="踏坑第四式"></a>踏坑第四式</h4><p><strong>iPhoneX适配</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 1.viewport meta 标签增加属性viewport-fit=cover</div><div class="line">&lt;meta name="viewport" content="width=device-width, viewport-fit=cover, xxxx"&gt;</div><div class="line">// 2.body元素增加样式</div><div class="line">body &#123;</div><div class="line">  padding-bottom: constant(safe-area-inset-bottom);</div><div class="line">  padding-bottom: env(safe-area-inset-bottom);</div><div class="line">&#125;</div><div class="line">// 3.如有fixed底部的元素，也增加上面样式</div><div class="line">xxx &#123;</div><div class="line">  padding-bottom: constant(safe-area-inset-bottom);</div><div class="line">  padding-bottom: env(safe-area-inset-bottom);</div><div class="line">  background-color: #fff; // 记得添加background-color，不然会出现透明镂空的情况</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="踏坑第五式"><a href="#踏坑第五式" class="headerlink" title="踏坑第五式"></a>踏坑第五式</h4><p><strong>某些机型不支持video标签的poster属性，特别是安卓</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">用图片元素 <span class="tag">&lt;<span class="name">img</span> /&gt;</span>来代替poster</div><div class="line">播放前显示<span class="tag">&lt;<span class="name">img</span> /&gt;</span>，隐藏 <span class="tag">&lt;<span class="name">video</span> /&gt;</span></div><div class="line">播放后显示<span class="tag">&lt;<span class="name">video</span> /&gt;</span>，隐藏 <span class="tag">&lt;<span class="name">img</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="踏坑第六式"><a href="#踏坑第六式" class="headerlink" title="踏坑第六式"></a>踏坑第六式</h4><p><strong>CSS透明度颜色设置问题</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Android</span>部分不支持 <span class="selector-tag">hex</span>写法，推荐用<span class="selector-tag">rgba</span>的写法</div><div class="line"><span class="selector-id">#0000009c</span> <span class="selector-tag">--</span>&gt; <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.61</span>)</div></pre></td></tr></table></figure></p>
<h4 id="踏坑第七式"><a href="#踏坑第七式" class="headerlink" title="踏坑第七式"></a>踏坑第七式</h4><p><strong>flex对低版本的ios和Android的支持问题</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">使用postcss的autoprefixer插件，自动添加浏览器内核前缀，</div><div class="line">并且增加更低浏览器版本的配置，自动添加flex老版本的属性和写法</div><div class="line">autoprefixer(&#123;</div><div class="line">    <span class="attr">browsers</span>: [</div><div class="line">        <span class="string">'iOS &gt;= 6'</span>,     <span class="comment">// 特殊处理支持低版本IOS</span></div><div class="line">        <span class="string">'Safari &gt;= 6'</span>,  <span class="comment">// 特殊处理支持低版本Safari</span></div><div class="line">    ],</div><div class="line">&#125;),</div></pre></td></tr></table></figure></p>
<h4 id="踏坑第八式"><a href="#踏坑第八式" class="headerlink" title="踏坑第八式"></a>踏坑第八式</h4><p><strong>ios 页面回退到长列表出现灰色遮挡问题</strong><br> <img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/h501.png" alt="demo截图"><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">方案<span class="number">1</span>：对列表数据进行缓存，比如redux之类的用法。</div><div class="line">方案<span class="number">2</span>：回退时，跳到页面顶部。</div><div class="line"><span class="keyword">const</span> timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">&#125;, <span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<h4 id="踏坑第九式"><a href="#踏坑第九式" class="headerlink" title="踏坑第九式"></a>踏坑第九式</h4><p><strong>ios 日期转换NAN的问题</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">将日期字符串的格式符号替换成<span class="string">'/'</span>。</div><div class="line">栗子：<span class="string">'yyyy-MM-dd'</span>.replace(<span class="regexp">/-/g</span>, <span class="string">'/'</span>)</div></pre></td></tr></table></figure></p>
<h4 id="踏坑第十式（React）"><a href="#踏坑第十式（React）" class="headerlink" title="踏坑第十式（React）"></a>踏坑第十式（React）</h4><p><strong>未知错误异常，导致页面崩溃，空白</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">React <span class="number">16.</span>x 增加了componentDidCatch() 生命周期方法</div><div class="line">捕获全局异常来进行页面的友好提示（具体用法网上有很多资料）</div></pre></td></tr></table></figure></p>
<h3 id="打完收招"><a href="#打完收招" class="headerlink" title="打完收招"></a>打完收招</h3><p>晋级还需要多多修炼</p>
<p>前端攻城狮②群：592688854。欢迎感兴趣的各路武林豪杰加入。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[腾讯地图React组件,附demo和源码]]></title>
      <url>https://yezihaohao.github.io/2018/03/11/%E8%85%BE%E8%AE%AF%E5%9C%B0%E5%9B%BEReact%E7%BB%84%E4%BB%B6-%E9%99%84demo%E5%92%8C%E6%BA%90%E7%A0%81/</url>
      <content type="html"><![CDATA[<h4 id="一个对腾讯web地图简单封装的React组件"><a href="#一个对腾讯web地图简单封装的React组件" class="headerlink" title="一个对腾讯web地图简单封装的React组件"></a>一个对腾讯web地图简单封装的React组件</h4><p><strong>GitHub源码地址：<a href="https://github.com/yezihaohao/react-qmap" target="_blank" rel="external">戳我</a></strong> </p>
<p><strong>栗子：<a href="https://cheng_haohao.gitee.io/reactqmap/#/dashboard" target="_blank" rel="external">戳我</a></strong></p>
<p> <strong>栗子源码：<a href="https://github.com/yezihaohao/react-qmap/tree/master/examples/src/components/maps" target="_blank" rel="external">戳我</a></strong>  </p>
<p> <img src="https://raw.githubusercontent.com/yezihaohao/react-qmap/master/examples/src/styles/t.gif" alt="demo截图"></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yarn add react-qmap  </div><div class="line"></div><div class="line">or npm install react-qmap</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReactQMap <span class="keyword">from</span> <span class="string">'react-qmap'</span>;</div><div class="line"></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">ReactQMap</span> </span></span></div><div class="line">    <span class="attr">center</span>=<span class="string">&#123;&#123;latitude:</span> <span class="attr">30.53786</span>, <span class="attr">longitude:</span> <span class="attr">104.07265</span>&#125;&#125; </div><div class="line">    <span class="attr">initialOptions</span>=<span class="string">&#123;&#123;zoomControl:</span> <span class="attr">true</span>, <span class="attr">mapTypeControl:</span> <span class="attr">true</span>&#125;&#125; </div><div class="line">    <span class="attr">apiKey</span>=<span class="string">"xxxxxx-xxxxx-xxxxx-xxxxxx"</span></div><div class="line">    <span class="attr">style</span>=<span class="string">&#123;&#123;height:</span> <span class="attr">300</span>&#125;&#125;    // 高度和宽度默认占父元素的<span class="attr">100</span>%</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><table>
<thead>
<tr>
<th>Method</th>
<th>Type</th>
<th>Optional</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>getMap</td>
<td>function</td>
<td>false</td>
<td></td>
<td>获取地图的对象和当前容器的map对象,第一个参数是new的当前map对象，第二个参数是全局map对象</td>
</tr>
<tr>
<td>style</td>
<td>object</td>
<td>false</td>
<td></td>
<td>设置组件的内联样式，默认样式width: ‘100%’, height: ‘100%’</td>
</tr>
<tr>
<td>className</td>
<td>string</td>
<td>false</td>
<td></td>
<td>设置组件的class</td>
</tr>
<tr>
<td>mySpot</td>
<td>object</td>
<td>false</td>
<td></td>
<td>设置地图的定位坐标</td>
</tr>
<tr>
<td>initialOptions</td>
<td>object</td>
<td>false</td>
<td>zoom: 14,disableDefaultUI: true, zoomControl: false,mapTypeControl: false,</td>
<td>初始化地图的参数，简单默认设置了几个，更多的初始化参数请参照<a href="http://lbs.qq.com/javascript_v2/doc/mapoptions.html" target="_blank" rel="external">文档</a></td>
</tr>
<tr>
<td>apiKey</td>
<td>string</td>
<td>true</td>
<td></td>
<td>设置地图引用的key,为防止限制调用API,建议<a href="http://lbs.qq.com/index.html" target="_blank" rel="external">官网</a>申请自己的key</td>
</tr>
<tr>
<td>center</td>
<td>object</td>
<td>true</td>
<td></td>
<td>设置地图初始化的中心位置坐标</td>
</tr>
</tbody>
</table>
<h4 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h4><p>有了初始化的地图，获取到地图对象之后，就可以按照官网提供的资料随心所欲了。</p>
<p>更多关于API的操作请查看腾讯地图官网（<a href="http://lbs.qq.com/javascript_v2/doc/index.html#g0" target="_blank" rel="external">戳我</a>）</p>
<p>简单的封装了一块原石，封装还在继续，如果老铁有更好的方式或想法不妨PR走起一波~会给你双击666</p>
<p>如果有问题可加入前端交流群一起讨论：前端攻城狮②群：592688854</p>
<h4 id="license"><a href="#license" class="headerlink" title="license"></a>license</h4><p>MIT</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ReactNative模仿网易云音乐手机客户端，兼容安卓和IOS两个平台]]></title>
      <url>https://yezihaohao.github.io/2017/10/23/ReactNative%E6%A8%A1%E4%BB%BF%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%89%8B%E6%9C%BA%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E5%85%BC%E5%AE%B9%E5%AE%89%E5%8D%93%E5%92%8CIOS%E4%B8%A4%E4%B8%AA%E5%B9%B3%E5%8F%B0/</url>
      <content type="html"><![CDATA[<h4 id="React-Native-模仿网易云音乐手机客户端，兼容安卓和IOS两个平台。"><a href="#React-Native-模仿网易云音乐手机客户端，兼容安卓和IOS两个平台。" class="headerlink" title="React Native 模仿网易云音乐手机客户端，兼容安卓和IOS两个平台。"></a>React Native 模仿网易云音乐手机客户端，兼容安卓和IOS两个平台。</h4><blockquote>
<p>GitHub 完整源码地址<a href="https://github.com/yezihaohao/NeteaseCloudMusic" target="_blank" rel="external">https://github.com/yezihaohao/NeteaseCloudMusic</a></p>
</blockquote>
<p>老规矩，先上图~😄</p>
<h4 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h4><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/total.gif" alt="全图"></p>
<h4 id="音乐播放"><a href="#音乐播放" class="headerlink" title="音乐播放"></a>音乐播放</h4><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/player.gif" alt="音乐播放"></p>
<a id="more"></a>
<h4 id="视频播放"><a href="#视频播放" class="headerlink" title="视频播放"></a>视频播放</h4><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/video.gif" alt="视频播放"></p>
<h4 id="歌曲列表"><a href="#歌曲列表" class="headerlink" title="歌曲列表"></a>歌曲列表</h4><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/playlist.png" alt="歌曲列表"></p>
<h4 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h4><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/user.gif" alt="用户界面"></p>
<h4 id="电台详情"><a href="#电台详情" class="headerlink" title="电台详情"></a>电台详情</h4><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/radio.gif" alt="电台详情"></p>
<h4 id="主要的技术栈和依赖第三方库："><a href="#主要的技术栈和依赖第三方库：" class="headerlink" title="主要的技术栈和依赖第三方库："></a>主要的技术栈和依赖第三方库：</h4><p>点击名称可跳转相关项目网站😄😄</p>
<ul>
<li><a href="https://facebook.github.io/react/" target="_blank" rel="external">react@16.0.0-alpha.12</a></li>
<li><a href="https://github.com/facebook/react-native" target="_blank" rel="external">react-native@0.48.2</a></li>
<li><a href="https://github.com/skv-headless/react-native-scrollable-tab-view" target="_blank" rel="external">react-native-scrollable-tab-view@0.7.4</a>(可滚动切换tab页面组件)</li>
<li><a href="https://github.com/leecade/react-native-swiper" target="_blank" rel="external">react-native-swiper@1.5.10</a></li>
<li><a href="https://github.com/oblador/react-native-vector-icons" target="_blank" rel="external">react-native-vector-icons@4.3.0</a>(包含很多icon图标)</li>
<li><a href="https://github.com/react-native-community/react-native-video" target="_blank" rel="external">react-native-video@2.0.0</a>(视频和音频播放器，经调研，最近版的安卓和IOS系统版本可正常使用)</li>
<li><a href="https://github.com/react-community/react-navigation" target="_blank" rel="external">react-navigation@1.0.0-beta.11</a>(推荐使用的路由库)</li>
<li><a href="https://github.com/reactjs/redux" target="_blank" rel="external">redux@3.7.2</a>(项目中重点用在播放器相关功能上)</li>
<li>其他细节库省略</li>
</ul>
<blockquote>
<p>ps: 个别插件会存在小bug或冲突。比如安卓平台swiper在scrollable-tab中不能触屏手动滚动。</p>
</blockquote>
<h4 id="主要的功能界面模块"><a href="#主要的功能界面模块" class="headerlink" title="主要的功能界面模块"></a>主要的功能界面模块</h4><blockquote>
<p>大部分主要是展示的demo，网易云的页面和功能实在是太多了，由于时间关系，并没有把所有的功能都做完整，后续会陆续加上其他的功能。</p>
</blockquote>
<ul>
<li>各部分模块首页展示</li>
<li>音乐播放，包括CD动画，歌词同步等。</li>
<li>MV视频播放</li>
<li>个人详情页面</li>
<li>其他细节等等</li>
</ul>
<h4 id="安装运行"><a href="#安装运行" class="headerlink" title="安装运行"></a>安装运行</h4><blockquote>
<p>特别鸣谢：<a href="https://github.com/Binaryify/NeteaseCloudMusicApi" target="_blank" rel="external">NeteaseCloudMusicApi</a> 提供全套API。<br>    运行本项目前请先本地（或服务器）运行此API接口项目,替换/scr/api/index.js 下BASE_URL的ip地址</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">0. 开发环境平台版本：Android-6.0  ios-10.3</div><div class="line"></div><div class="line">1. git clone https://github.com/yezihaohao/NeteaseCloudMusic.git</div><div class="line"></div><div class="line">2. yarn or npm install</div><div class="line"></div><div class="line">3. react-native link </div><div class="line"></div><div class="line">3. react-native run-ios 或者 react-native run-android</div></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>react-native上手不难，熟悉react，看react-native文档，看下开源项目就可以开始开发，就是向下兼容比较差，可能这个版本用的别人的组件下个版本就会有bug。</p>
<p>一般展示性的界面比较容易，重点熟悉flex布局，注意默认纵向排列。</p>
<p>动画模块也需要着重了解下，可以提升用户体验。</p>
<p>多了解下其他的第三方组件，有很多别人都写好的，也要看react-native更新文档。</p>
<p>其他细节在开发过程中慢慢体会~~😄😄😄</p>
<p>刚入门react-native，大佬轻喷~~</p>
<blockquote>
<p>该项目会持续更新~所有使用数据仅供学习交流，并无它意。若有疑问，可加前端QQ群与我交流：264591039</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Jenkins实现前端项目自动化集成打包部署]]></title>
      <url>https://yezihaohao.github.io/2017/09/09/Jenkins%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E5%8C%96%E9%9B%86%E6%88%90%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>  以前写前端项目打包部署，都是手动运行命令，打包完，然后压缩，再上传到服务器解压。<br>    这种方式确实有点low并且效率也不高。<br>    自从用了Jenkins持续集成工具，写前端项目越来越工程化，再也不用担心忘记部署项目，也不用烦躁每次打包压缩后还要部署多个服务器和环境，更开心的是每次家里写完代码，不用远程公司部署项目，提交代码后自动会为你部署。<br>    本文基于React的前端项目和GitLab的代码仓库以及Windows(其他系统平台大同小异)，简述Jenkins实现自动部署的配置。</p>
</blockquote>
<h3 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h3><p>前提：已配置好java环境</p>
<h4 id="1-下载对应的安装程序点我进入下载网站或直接下载war包"><a href="#1-下载对应的安装程序点我进入下载网站或直接下载war包" class="headerlink" title="1.下载对应的安装程序点我进入下载网站或直接下载war包"></a>1.下载对应的安装程序<a href="https://jenkins.io/download/" target="_blank" rel="external">点我进入下载网站</a>或直接<a href="http://mirrors.jenkins.io/war-stable/latest/jenkins.war" target="_blank" rel="external">下载war包</a></h4><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/Jenkins1.png" alt="截图"></p>
<h4 id="2-根据提示安装完成（默认端口是8080）"><a href="#2-根据提示安装完成（默认端口是8080）" class="headerlink" title="2.根据提示安装完成（默认端口是8080）"></a>2.根据提示安装完成（默认端口是8080）</h4><p>war包启动方式： java -jar jenkins.war –httpPort=8080（端口自定义），然后访问<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a></p>
<h4 id="3-查看插件"><a href="#3-查看插件" class="headerlink" title="3.查看插件"></a>3.查看插件</h4><p>点开系统设置的插件管理页面，如果可选插件列表为空，点击高级标签页，替换升级站点的URL为：<a href="http://mirror.xmission.com/jenkins/updates/update-center.json" target="_blank" rel="external">http://mirror.xmission.com/jenkins/updates/update-center.json</a><br>并且点击提交和立即获取<br><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/Jenkins2.png" alt="截图"></p>
<h4 id="4-返回可选插件，选择如下插件安装（如果已安装，请忽略）"><a href="#4-返回可选插件，选择如下插件安装（如果已安装，请忽略）" class="headerlink" title="4.返回可选插件，选择如下插件安装（如果已安装，请忽略）"></a>4.返回可选插件，选择如下插件安装（如果已安装，请忽略）</h4><p>1.Publish Over SSH<br>2.GitLab Plugin<br>3.Email Extension Plugin<br><a id="more"></a></p>
<h3 id="提前设置配置"><a href="#提前设置配置" class="headerlink" title="提前设置配置"></a>提前设置配置</h3><p>为了方便新建任务，所以先将一些设置配置好，进入系统管理系统设置。</p>
<h4 id="1-配置Publish-over-SSH"><a href="#1-配置Publish-over-SSH" class="headerlink" title="1.配置Publish over SSH"></a>1.配置Publish over SSH</h4><p>在Publish over SSH处点击增加，添加SSH server，并且选择高级设置，设置相应的ip,用户名和密码等。（其他选项可不用管）<br><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/Jenkins3.png" alt="截图"></p>
<h4 id="2-配置邮件通知，可通过勾选发送邮件测试是否配置成功"><a href="#2-配置邮件通知，可通过勾选发送邮件测试是否配置成功" class="headerlink" title="2.配置邮件通知，可通过勾选发送邮件测试是否配置成功"></a>2.配置邮件通知，可通过勾选发送邮件测试是否配置成功</h4><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/Jenkins4.png" alt="截图"></p>
<h3 id="新建任务"><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h3><h4 id="1-点击新建，输入名称，选择自由风格的项目"><a href="#1-点击新建，输入名称，选择自由风格的项目" class="headerlink" title="1.点击新建，输入名称，选择自由风格的项目"></a>1.点击新建，输入名称，选择自由风格的项目</h4><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/Jenkins5.png" alt="截图"></p>
<h4 id="2-配置源码"><a href="#2-配置源码" class="headerlink" title="2.配置源码"></a>2.配置源码</h4><p>选择Git，并填上gitlab项目克隆地址，用户密钥以及分支<br><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/Jenkins6.png" alt="截图"></p>
<h4 id="3-配置构建触发器"><a href="#3-配置构建触发器" class="headerlink" title="3.配置构建触发器"></a>3.配置构建触发器</h4><p>勾选Poll SCM即可，其他可忽略，默认提交代码到相应的分支触发该任务<br><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/Jenkins7.png" alt="截图"></p>
<h4 id="4-配置构建"><a href="#4-配置构建" class="headerlink" title="4.配置构建"></a>4.配置构建</h4><p>增加构建步骤选择Execute shell<br><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/Jenkins8.png" alt="截图"></p>
<h4 id="5-配置构建后操作"><a href="#5-配置构建后操作" class="headerlink" title="5.配置构建后操作"></a>5.配置构建后操作</h4><p>增加构建后操作，选择Send build artifacts over SSH。即上述操作全部完成并自动生产了部署文件，该步骤将部署文件上传到之前的SSH服务器（Linux服务器），并执行你想让他执行的命名，部署多个服务器及平台，选择添加server并完成相应的配置<br><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/Jenkins9.png" alt="截图"><br>配置后再增加构建后操作，选择Editable Email Notification。根据提示配置需要通知的邮箱，其他可默认。然后选择高级设置，配置失败和成功邮件通知。<br><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/Jenkins11.png" alt="截图"></p>
<h3 id="绑定GitLab-Web-hooks"><a href="#绑定GitLab-Web-hooks" class="headerlink" title="绑定GitLab Web hooks"></a>绑定GitLab Web hooks</h3><p>添加web hook. <a href="http://jenkins-server/gitlab/notify_commit" target="_blank" rel="external">http://jenkins-server/gitlab/notify_commit</a>  需要填上的固定格式的URL地址，把jenkins-server替换成对应的Jenkins访问地址，注意：如果是localhost，需要换成ip地址。<br>添加完之后，点击Test Hook。此时Jenkins界面构建队列出现某个任务正在执行，表示配置成功。<br><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/Jenkins10.png" alt="截图"></p>
<h3 id="验证提交代码，成功自动打包部署"><a href="#验证提交代码，成功自动打包部署" class="headerlink" title="验证提交代码，成功自动打包部署"></a>验证提交代码，成功自动打包部署</h3><p>提交代码，观察Jenkins界面，出现构建任务，构建完成之后收到邮件通知。<br><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/Jenkins12.png" alt="截图"></p>
<blockquote>
<p>最后，推荐给大家前端交流QQ群：264591039。欢迎来这里和大家一起畅聊大前端的一切~</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React+AntD后台管理系统解决方案--终极版]]></title>
      <url>https://yezihaohao.github.io/2017/05/09/React-AntD%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E7%BB%88%E6%9E%81%E7%89%88/</url>
      <content type="html"><![CDATA[<h3 id="最下方增加版本更新日志😁"><a href="#最下方增加版本更新日志😁" class="headerlink" title="最下方增加版本更新日志😁"></a>最下方增加版本更新日志😁</h3><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>网上react后台管理开源免费的完整版项目比较少，所以利用空余时间集成了一个版本出来，已放到GitHub<br>  启动和打包的时间都稍长，请耐心等待两分钟</p>
</blockquote>
<ul>
<li><a href="https://github.com/yezihaohao/react-admin" target="_blank" rel="external">GitHub地址</a></li>
<li><a href="http://cheng_haohao.oschina.io/reactadmin/#/app/dashboard/index" target="_blank" rel="external">预览地址</a>(已增加响应式，可手机预览😄)</li>
</ul>
<h3 id="依赖模块"><a href="#依赖模块" class="headerlink" title="依赖模块"></a>依赖模块</h3><p><span style="color: rgb(184,49,47);">项目是用create-react-app创建的，主要还是列出新加的功能依赖包</span></p>
<p><span style="color: rgb(184,49,47);">点击名称可跳转相关网站😄😄</span></p>
<ul>
<li><a href="https://facebook.github.io/react/" target="_blank" rel="external">react@15.5.0</a></li>
<li><a href="https://react-guide.github.io/react-router-cn/" target="_blank" rel="external">react-router@3.0.2</a>(<span style="color: rgb(243,121,52);">react路由,4.x的差异还是比较大，暂时还是3.x的版本</span>)</li>
<li><a href="https://ant.design/index-cn" target="_blank" rel="external">antd@2.9.3</a>(<span style="color: rgb(243,121,52);">蚂蚁金服开源的react ui组件框架</span>)</li>
<li><a href="https://github.com/mzabriskie/axios" target="_blank" rel="external">axios@0.16.1</a>(<span style="color: rgb(243,121,52);">http请求模块，可用于前端任何场景，很强大👍</span>)</li>
<li><a href="https://github.com/hustcc/echarts-for-react" target="_blank" rel="external">echarts-for-react@1.2.0</a>(<span style="color: rgb(243,121,52);">可视化图表，别人基于react对echarts的封装，足够用了</span>)</li>
<li><a href="http://recharts.org/#/zh-CN/" target="_blank" rel="external">recharts@0.22.3</a>(<span style="color: rgb(243,121,52);">另一个基于react封装的图表，个人觉得是没有echarts好用</span>)</li>
<li><a href="https://github.com/rstacruz/nprogress" target="_blank" rel="external">nprogress@0.2.0</a>(<span style="color: rgb(243,121,52);">顶部加载条，蛮好用👍</span>)</li>
<li><a href="https://github.com/jpuri/react-draft-wysiwyg" target="_blank" rel="external">react-draft-wysiwyg@1.9.6</a>(<span style="color: rgb(243,121,52);">别人基于react的富文本封装，如果找到其他更好的可以替换</span>)</li>
<li><a href="https://github.com/mzabriskie/react-draggable" target="_blank" rel="external">react-draggable@2.2.4</a>(<span style="color: rgb(243,121,52);">拖拽模块，找了个简单版的</span>)</li>
<li><a href="https://github.com/sindresorhus/screenfull.js/" target="_blank" rel="external">screenfull@3.2.0</a>(<span style="color: rgb(243,121,52);">全屏插件</span>)</li>
<li><a href="https://github.com/dimsemenov/photoswipe" target="_blank" rel="external">photoswipe@4.1.2</a>(<span style="color: rgb(243,121,52);">图片弹层查看插件，不依赖jQuery，还是蛮好用👍</span>)</li>
<li><a href="http://daneden.me/animate" target="_blank" rel="external">animate.css@3.5.1</a>(<span style="color: rgb(243,121,52);">css动画库</span>)</li>
<li>其他小细节省略</li>
</ul>
<h3 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h3><p><span style="color: rgb(184,49,47);">备注：项目只引入了ant-design的部分组件，其他的组件antd官网有源码，可以直接复制到项目中使用，后续有时间补上全部组件。</span><br><span style="color: rgb(184,49,47);">项目使用了antd的自定义主题功能–&gt;黑色，若想替换其他颜色，具体操作请查看antd官网</span><br><a id="more"></a></p>
<ul>
<li>首页<ul>
<li>完整布局</li>
<li>换肤(全局功能，暂时只实现了顶部导航的换肤，后续加上其他模块)</li>
</ul>
</li>
<li>导航菜单<ul>
<li>顶部导航(菜单伸缩，全屏功能)</li>
<li>左边菜单(增加滚动条以及适配路由的active操作)</li>
</ul>
</li>
<li>UI模块<ul>
<li>按钮(antd组件)</li>
<li>图标(antd组件并增加彩色表情符)</li>
<li>加载中(antd组件并增加顶部加载条)</li>
<li>通知提醒框(antd组件)</li>
<li>标签页(antd组件)</li>
<li>轮播图(ant动效组件)</li>
<li>富文本</li>
<li>拖拽</li>
<li>画廊</li>
</ul>
</li>
<li>动画<ul>
<li>基础动画(animate.css所有动画)</li>
<li>动画案例</li>
</ul>
</li>
<li>表格<ul>
<li>基础表格(antd组件)</li>
<li>高级表格(antd组件)</li>
<li>异步表格(数据来自掘金酱的接口)</li>
</ul>
</li>
<li>表单<ul>
<li>基础表单(antd组件)</li>
</ul>
</li>
<li>图表<ul>
<li>echarts图表</li>
<li>recharts图表</li>
</ul>
</li>
<li>页面<ul>
<li>登录页面(包括GitHub第三方登录)</li>
<li>404页面</li>
</ul>
</li>
</ul>
<h3 id="功能截图"><a href="#功能截图" class="headerlink" title="功能截图"></a>功能截图</h3><h4 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h4><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd1.gif" alt="截图"></p>
<h4 id="按钮图标等"><a href="#按钮图标等" class="headerlink" title="按钮图标等"></a>按钮图标等</h4><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd2.gif" alt="截图"></p>
<h4 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h4><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd3.gif" alt="截图"></p>
<h4 id="富文本"><a href="#富文本" class="headerlink" title="富文本"></a>富文本</h4><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd4.gif" alt="截图"></p>
<h4 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h4><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd5.gif" alt="截图"></p>
<h4 id="画廊"><a href="#画廊" class="headerlink" title="画廊"></a>画廊</h4><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd6.gif" alt="截图"></p>
<h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd7.gif" alt="截图"></p>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd8.gif" alt="截图"></p>
<h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd9.gif" alt="截图"></p>
<h4 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h4><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd10.gif" alt="截图"></p>
<h4 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h4><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/rd11.gif" alt="截图"></p>
<h3 id="代码目录"><a href="#代码目录" class="headerlink" title="代码目录"></a>代码目录</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">+-- build/                                  ---打包的文件目录</div><div class="line">+-- config/                                 ---npm run eject 后的配置文件目录</div><div class="line">+-- node_modules/                           ---npm下载文件目录</div><div class="line">+-- public/</div><div class="line">|   --- index.html							---首页入口html文件</div><div class="line">|   --- npm.json							---echarts测试数据</div><div class="line">|   --- weibo.json							---echarts测试数据</div><div class="line">+-- src/                                    ---核心代码目录</div><div class="line">|   +-- axios                               ---http请求存放目录</div><div class="line">|   |    --- index.js</div><div class="line">|   +-- components                          ---各式各样的组件存放目录</div><div class="line">|   |    +-- animation                      ---动画组件</div><div class="line">|   |    |    --- ...</div><div class="line">|   |    +-- charts                         ---图表组件</div><div class="line">|   |    |    --- ...</div><div class="line">|   |    +-- dashboard                      ---首页组件</div><div class="line">|   |    |    --- ...</div><div class="line">|   |    +-- forms                          ---表单组件</div><div class="line">|   |    |    --- ...</div><div class="line">|   |    +-- pages                          ---页面组件</div><div class="line">|   |    |    --- ...</div><div class="line">|   |    +-- tables                         ---表格组件</div><div class="line">|   |    |    --- ...</div><div class="line">|   |    +-- ui                             ---ui组件</div><div class="line">|   |    |    --- ...</div><div class="line">|   |    --- BreadcrumbCustom.jsx           ---面包屑组件</div><div class="line">|   |    --- HeaderCustom.jsx               ---顶部导航组件</div><div class="line">|   |    --- Page.jsx                       ---页面容器</div><div class="line">|   |    --- SiderCustom.jsx                ---左边菜单组件</div><div class="line">|   +-- style                               ---项目的样式存放目录，主要采用less编写</div><div class="line">|   +-- utils                               ---工具文件存放目录</div><div class="line">|   --- App.js                              ---组件入口文件</div><div class="line">|   --- index.js                            ---项目的整体js入口文件，包括路由配置等</div><div class="line">--- .env                                    ---启动项目自定义端口配置文件</div><div class="line">--- .eslintrc                               ---自定义eslint配置文件，包括增加的react jsx语法限制</div><div class="line">--- package.json</div></pre></td></tr></table></figure>
<h3 id="安装运行"><a href="#安装运行" class="headerlink" title="安装运行"></a>安装运行</h3><h5 id="1-下载或克隆项目源码"><a href="#1-下载或克隆项目源码" class="headerlink" title="1.下载或克隆项目源码"></a>1.下载或克隆项目源码</h5><h5 id="2-npm安装相关包文件-国内建议增加淘宝镜像源，不然很慢，你懂的😁"><a href="#2-npm安装相关包文件-国内建议增加淘宝镜像源，不然很慢，你懂的😁" class="headerlink" title="2.npm安装相关包文件(国内建议增加淘宝镜像源，不然很慢，你懂的😁)"></a>2.npm安装相关包文件(国内建议增加淘宝镜像源，不然很慢，你懂的😁)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i</div></pre></td></tr></table></figure>
<h5 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3.启动项目"></a>3.启动项目</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm start</div></pre></td></tr></table></figure>
<h5 id="4-打包项目"><a href="#4-打包项目" class="headerlink" title="4.打包项目"></a>4.打包项目</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run build</div></pre></td></tr></table></figure>
<h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><h4 id="2017-07-08"><a href="#2017-07-08" class="headerlink" title="2017-07-08"></a>2017-07-08</h4><ul>
<li>依赖包版本升级<ul>
<li>react@15.6.1</li>
<li>antd@2.11.2</li>
<li>webpack@2.6.1</li>
<li>等等<h4 id="2017-08-01"><a href="#2017-08-01" class="headerlink" title="2017-08-01"></a>2017-08-01</h4></li>
</ul>
</li>
<li>引入redux系列<ul>
<li>redux@3.7.2</li>
<li>redux-thunk@2.2.0</li>
<li>react-redux@5.0.5</li>
</ul>
</li>
<li>增加权限管理模块<ul>
<li>使用easy-mock模拟数据模拟登录接口</li>
<li>使用redux系列将登录用户数据传递给权限组件</li>
<li>权限组件采用Render Callback的方式传递权限给需要受控制的组件（具体做法请查看源代码。）</li>
<li>用户状态保存在localStorage中</li>
<li>具体做法请运行项目查看</li>
<li>PS：以上管理权限只是一种方式，但这绝对不是唯一的方式，也不是最好的方式。如果你有更好的方式，不妨加上面的群和大家一起分享下。😄😄</li>
</ul>
</li>
<li>增加路径别名<ul>
<li>使用@别名处理引入组件相对路径过长问题。</li>
<li>缺点：编辑器不能使用快捷提示和快捷跳转到相应的文件<h4 id="2017-08-13"><a href="#2017-08-13" class="headerlink" title="2017-08-13"></a>2017-08-13</h4></li>
</ul>
</li>
<li>权限管理模块增加页面跳转权限验证<ul>
<li>点击权限管理的路由拦截，若没有访问权限则会跳转到404页面。</li>
<li>大致实现方式(非常简单)：通过向自定义router组件传入store，登录之后可获取到redux中的权限state数据，并通过判断是否包含权限进行跳转。ps: 该demo的效果是管理员登录之后才能跳转到路由拦截页面。具体操作请拉取代码尝试。<h4 id="2017-08-26"><a href="#2017-08-26" class="headerlink" title="2017-08-26"></a>2017-08-26</h4></li>
</ul>
</li>
<li>增加响应式布局<ul>
<li>替换antd Col 组件的响应式栅格为md(具体参数用法请查看antd官方文档)</li>
<li>初始化页面是获取当前浏览器宽度设置菜单显示类型</li>
<li>监听window的onresize函数，设置菜单显示类型。PS：浏览器宽度存入redux中，方便组件之间传递。<br><img src="https://raw.githubusercontent.com/yezihaohao/react-admin/master/src/style/imgs/mobile.gif" alt="截图"></li>
</ul>
</li>
</ul>
<h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>该项目会不定时更新，后续时间会添加更多的模块</p>
<p>若有问题，可加QQ群264591039与我交流</p>
<p>如果对你有帮助，给个star哟~~❤️❤️❤️❤️</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React项目笔记之create-react-app自定义ESLint配置文件]]></title>
      <url>https://yezihaohao.github.io/2017/03/26/React%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0-create-react-app%E8%87%AA%E5%AE%9A%E4%B9%89ESLint%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>了解eslint基础用法，若想更进一步了解其，请查阅<a href="http://eslint.org/" target="_blank" rel="external">官网</a>以及相关资料(<a href="http://eslint.cn/" target="_blank" rel="external">中文网</a>)<br>    若有问题请指出或加群264591039与我讨论。</p>
</blockquote>
<h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>使用create-react-app 创建项目（此过程不做详解），然后运行<code>npm run eject</code>使其暴露webpack等配置文件</p>
<h3 id="自定义eslint"><a href="#自定义eslint" class="headerlink" title="自定义eslint"></a>自定义eslint</h3><p>上述步骤并没有暴露react脚手架封装的eslint操作，为了使得项目统一规范化，添加jsx-eslint操作<br>是非常不错的选择（关于js其他的eslint操作，请参见官网，本文主要针对jsx限制规范配置）。</p>
<ul>
<li>在项目根目录下添加.eslintrc文件<a id="more"></a></li>
<li>在根目录找到config文件夹，并找到文件夹下的webpack.config.dev.js文件</li>
<li>webpack.config.dev.js文件添加如下代码：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">enforce: <span class="string">'pre'</span>,</div><div class="line"><span class="attr">use</span>: [&#123;</div><div class="line">  <span class="comment">// @remove-on-eject-begin</span></div><div class="line">  <span class="comment">// Point ESLint to our predefined config.</span></div><div class="line">  options: &#123;</div><div class="line">    <span class="comment">//configFile: path.join(__dirname, '../.eslintrc'),</span></div><div class="line">    useEslintrc: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// @remove-on-eject-end</span></div><div class="line">  loader: <span class="string">'eslint-loader'</span></div><div class="line">&#125;],</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/react_1.png" alt="截图"></p>
<ul>
<li>运行<code>npm start</code>,此时，你编写的jsx文件都是经过.eslintrc的配置限制</li>
</ul>
<h3 id="eslintrc文件基本规范配置"><a href="#eslintrc文件基本规范配置" class="headerlink" title=".eslintrc文件基本规范配置"></a>.eslintrc文件基本规范配置</h3><p><code>ps:</code>  配置的value对应的值： 0 : off   1 : warning   2 : error<br>不满足以下的规范设置的，编译代码时将有黄色提示<br>具体配置规则可参见<a href="https://github.com/airbnb/javascript/tree/master/react" target="_blank" rel="external">Github</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"extends"</span>: <span class="string">"react-app"</span>,</div><div class="line">  <span class="string">"rules"</span>: &#123;</div><div class="line">    <span class="string">"no-multi-spaces"</span>: 1,</div><div class="line">    <span class="string">"react/jsx-space-before-closing"</span>: 1,        // 总是在自动关闭的标签前加一个空格，正常情况下也不需要换行</div><div class="line">    <span class="string">"jsx-quotes"</span>: 1,</div><div class="line">    <span class="string">"react/jsx-closing-bracket-location"</span>: 1,    // 遵循JSX语法缩进/格式</div><div class="line">    <span class="string">"react/jsx-boolean-value"</span>: 1,               // 如果属性值为 <span class="literal">true</span>, 可以直接省略</div><div class="line">    <span class="string">"react/no-string-refs"</span>: 1,      // 总是在Refs里使用回调函数</div><div class="line">    <span class="string">"react/self-closing-comp"</span>: 1,    // 对于没有子元素的标签来说总是自己关闭标签</div><div class="line">    <span class="string">"react/jsx-no-bind"</span>: 1,          // 当在 render() 里使用事件处理方法时，提前在构造函数里把 this 绑定上去</div><div class="line">    <span class="string">"react/sort-comp"</span>: 1,            // 按照具体规范的React.createClass 的生命周期函数书写代码</div><div class="line">    <span class="string">"react/jsx-pascal-case"</span>: 1        // React模块名使用帕斯卡命名，实例使用骆驼式命名</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Javascript项目笔记]]></title>
      <url>https://yezihaohao.github.io/2017/03/13/Javascript%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="针对项目中常用的javascript-api等，进行一个汇总"><a href="#针对项目中常用的javascript-api等，进行一个汇总" class="headerlink" title="针对项目中常用的javascript api等，进行一个汇总~"></a>针对项目中常用的javascript api等，进行一个汇总~</h3><p>文档持续更新中。。。</p>
<blockquote>
<p>前提：有些功能可能浏览器还不支持，需要用babel进行转换，具体的babel环境搭建，请自行Baidu或google。<br>  很多框架的脚手架生成的helloworld项目是已经搭好的环境，比如react或者vue，所以使用脚手架的童鞋大可放心使用。<br>  若有问题可加群264591039与我讨论。</p>
</blockquote>
<h3 id="扩展运算符：三个点-…"><a href="#扩展运算符：三个点-…" class="headerlink" title="扩展运算符：三个点 …"></a>扩展运算符：三个点 …</h3><h4 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> arr1 = [1, 2], arr2 = [3, 4];</div><div class="line">arr1.push(...arr2);  // 把arr2合并到arr1的尾部, arr1改变</div><div class="line">arr1.unshift(...arr2);   // 把arr2合并到arr1的顶部, arr1改变</div><div class="line">[...arr1, ...arr2];  // 生成一个由arr1和arr2组成的新数组，原数组不变</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/jsdemo1.gif" alt="截图"></p>
<h4 id="复制对象"><a href="#复制对象" class="headerlink" title="复制对象"></a>复制对象</h4><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let obj = &#123;a: 1&#125;;</div><div class="line">&#123;...obj, b: 2&#125;;     // 返回一个新的对象，&#123;a: 1, b: 2&#125;, obj对象不变</div><div class="line">// 等价于下面的用法</div><div class="line">Object.assign(&#123;&#125;, obj, &#123;b: 2&#125;);     // 返回一个新的对象，&#123;a: 1, b: 2&#125;,  obj对象不变</div><div class="line">// 另外Object.assign 还有一个用法</div><div class="line">Object.assign(obj, &#123;b: 2&#125;);      // 返回obj对象并且新增加了b属性：&#123;a: 1, b: 2&#125;  obj对象改变</div><div class="line">// 由于使用的chrome浏览器还不支持第一种用法，只能演示Object.assign。项目中使用babel转换</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/jsdemo3.gif" alt="截图"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Socket.io+Notification实现浏览器消息推送]]></title>
      <url>https://yezihaohao.github.io/2017/02/20/Socket-io-Notification%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>socket.io: 包含对websocket的封装，可实现服务端和客户端之前的通信。详情见<a href="http://socket.io" target="_blank" rel="external">官网</a> (虽然是英文文档，但还是通俗易懂)。<br>  Notification: Html5新特性，用于浏览器的桌面通知，只有部分浏览器支持。<br>  通过nodejs+Socket.io+Notification实现服务端往浏览器客户端发送自定义消息。<br>  若有问题可加群264591039与我讨论。<br>  转载请注明出处！</p>
</blockquote>
<h3 id="开发前提"><a href="#开发前提" class="headerlink" title="开发前提"></a>开发前提</h3><p>本地安装nodejs以及npm<br>对nodejs以及express框架有一定了解。（本篇将和官方文档一样，采用express 4.10.2）</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul>
<li>新建一个文件夹notification（以下操作都在该文件夹的根目录进行）</li>
<li>npm初始化package.json文件 <code>npm init</code></li>
<li>安装express(指定版本4.10.2，没有试过其他版本，感兴趣可以试下) <code>npm install --save express@4.10.2</code></li>
<li>安装socket.io(本人安装的版本是1.7.3) <code>npm install --save socket.io</code></li>
</ul>
<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><h4 id="构建通信环境"><a href="#构建通信环境" class="headerlink" title="构建通信环境"></a>构建通信环境</h4><p>在根目录下新建一个index.html（注：index页面的样式来自socket.io的官方示例）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;title&gt;Socket.IO Notification&lt;/title&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">      * &#123; margin: 0; padding: 0; box-sizing: border-box; &#125;</div><div class="line">      body &#123; font: 13px Helvetica, Arial; &#125;</div><div class="line">      form &#123; background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; &#125;</div><div class="line">      form input &#123; border: 0; padding: 10px; width: 90%; margin-right: .5%; &#125;</div><div class="line">      form button &#123; width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; &#125;</div><div class="line">      #messages &#123; list-style-type: none; margin: 0; padding: 0; &#125;</div><div class="line">      #messages li &#123; padding: 5px 10px; &#125;</div><div class="line">      #messages li:nth-child(odd) &#123; background: #eee; &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;ul id=&quot;messages&quot;&gt;&lt;/ul&gt;</div><div class="line">    &lt;form action=&quot;&quot;&gt;</div><div class="line">      &lt;input id=&quot;m&quot; autocomplete=&quot;off&quot; /&gt;&lt;button&gt;Send&lt;/button&gt;</div><div class="line">    &lt;/form&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>新建一个index.js文件，并在js文件中构建相应的对象和变量，创建监听端口为8080 的服务器，以及添加映射到index.html的路由。<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> express = require(<span class="string">'express'</span>),</div><div class="line">	app = express(),</div><div class="line">	http = require(<span class="string">'http'</span>).Server(app),</div><div class="line">	io = require(<span class="string">'socket.io'</span>)(http);</div><div class="line">app.use(express.static(__dirname + <span class="string">'/public'</span>));</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="keyword">function</span>(req, res)&#123;</div><div class="line">	res.sendfile(<span class="string">'index.html'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">http.listen(8080, <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">	console.log(<span class="string">'listening on port 8080'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>运行 <code>node index.js</code> 用浏览器打开<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> 成功的话即可看到index.html页面的内容。<br>在index.js的监听端口代码上方添加socket.io的监听事件，监听用户连接的connection。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">io.on(<span class="string">'connection'</span>, <span class="keyword">function</span>(socket)&#123;</div><div class="line">	console.log(<span class="string">'a user connected'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>创建监听Event事件:notification，并用emit向客户端推送消息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">io.on(<span class="string">'connection'</span>, <span class="keyword">function</span>(socket)&#123;</div><div class="line">	console.log(<span class="string">'a user connected'</span>);</div><div class="line">	socket.on(<span class="string">'notification'</span>, <span class="keyword">function</span>(msg)&#123;</div><div class="line">		console.log(msg);</div><div class="line">	 	io.emit(<span class="string">'notification'</span>, msg);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在index.html页面中的上方引入socket.io文件，并用emit向服务器提交数据以及监听事件notification，接收服务器推送的消息<br>注意，引入socket.io的方式在运行<code>node index.js</code>之后才有效果，直接打开index.html是找不到这个文件的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">  &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"/socket.io/socket.io.js"</span>&gt;&lt;/script&gt;</div><div class="line">  &lt;script src=<span class="string">"http://code.jquery.com/jquery-1.11.1.js"</span>&gt;&lt;/script&gt;</div><div class="line">  &lt;script&gt;</div><div class="line"><span class="built_in">let</span> socket = io();</div><div class="line">$(<span class="string">'form'</span>).submit(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">	socket.emit(<span class="string">'notification'</span>, $(<span class="string">'#m'</span>).val());</div><div class="line">	$(<span class="string">'#m'</span>).val(<span class="string">''</span>);</div><div class="line">	<span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">&#125;);</div><div class="line">socket.on(<span class="string">'notification'</span>, <span class="keyword">function</span>(msg)&#123;</div><div class="line">	console.log(msg);</div><div class="line">&#125;);</div><div class="line">  &lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>浏览器打开<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> 后，在input框中输入，点击发送，在nodejs运行的控制台可以看到如下信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a user connected //以下数据是输入框输入的数据</div><div class="line">hello   </div><div class="line"><span class="built_in">test</span></div><div class="line">测试</div></pre></td></tr></table></figure></p>
<h4 id="实现自定义消息推送"><a href="#实现自定义消息推送" class="headerlink" title="实现自定义消息推送"></a>实现自定义消息推送</h4><p>完整代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">  &lt;script&gt;</div><div class="line"><span class="built_in">let</span> socket = io();</div><div class="line">$(<span class="string">'form'</span>).submit(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">	socket.emit(<span class="string">'notification'</span>, $(<span class="string">'#m'</span>).val());</div><div class="line">	$(<span class="string">'#m'</span>).val(<span class="string">''</span>);</div><div class="line">	<span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">&#125;);</div><div class="line">socket.on(<span class="string">'notification'</span>, <span class="keyword">function</span>(msg)&#123;</div><div class="line">	notice(msg);    //若允许通知，待输入消息后监听变化就会调用通知方法</div><div class="line">&#125;);</div><div class="line"></div><div class="line">   Notification.requestPermission(<span class="keyword">function</span>(permission) &#123;&#125;);    //询问浏览器是否允许通知</div><div class="line">    </div><div class="line"><span class="keyword">function</span> notice(msg) &#123;  </div><div class="line">	<span class="built_in">let</span> _notification = new Notification(`消息通知`,&#123;</div><div class="line">		body:`<span class="variable">$&#123;msg&#125;</span>`,</div><div class="line">		icon:<span class="string">'http://localhost:8080/23539868.jpg'</span></div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	<span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">		_notification.close(); //设置5秒后自动关闭通知框</div><div class="line">	&#125;,5000);</div><div class="line">  </div><div class="line">&#125;</div><div class="line">  &lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h3 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h3><p>完整示例代码见<a href="https://github.com/yezihaohao/notification" target="_blank" rel="external">GitHub</a></p>
<p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/TEST.gif" alt="截图"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vuejs2.X组件化-阿里的G2图表组件]]></title>
      <url>https://yezihaohao.github.io/2017/02/14/Vuejs2-X%E7%BB%84%E4%BB%B6%E5%8C%96-%E9%98%BF%E9%87%8C%E7%9A%84G2%E5%9B%BE%E8%A1%A8%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>vue 的组件化开发是一个非常不错的机制.’一处开发,多处引用’，不仅降低的维护成本，提高了开发效率，而且单独的组件有单独的视图和交互数据逻辑，使得系统层次更加分明。若有问题可加群264591039与我讨论~转载文章请标明出处！</p>
</blockquote>
<h3 id="开发场景"><a href="#开发场景" class="headerlink" title="开发场景"></a>开发场景</h3><p>数据可视化是我们互联网常见的功能，所以难免我们会在项目中插入图表等，找到一个还算可以的图形插件，阿里的G2图形库，详情请参见<a href="https://antv.alipay.com/g2/doc/" target="_blank" rel="external">G2官网</a>。接下来就开始我们的Vue G2组件化之旅。</p>
<h3 id="脚手架搭建helloworld"><a href="#脚手架搭建helloworld" class="headerlink" title="脚手架搭建helloworld"></a>脚手架搭建helloworld</h3><p>先用脚手架工具 vue-cli搭建一个vue的helloworld项目(Vue的相关教程请看<a href="https://cn.vuejs.org" target="_blank" rel="external">Vue官网</a>)，按照readme文档正常运行该项目。</p>
<h3 id="安装G2插件"><a href="#安装G2插件" class="headerlink" title="安装G2插件"></a>安装G2插件</h3><p>在package.json的目录下用npm包管理工具安装G2插件库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev g2</div></pre></td></tr></table></figure></p>
<p>我用到的版本是2.2.1，现在最新的好像是2.2.2，应该也没什么问题，不过我没测试过</p>
<h3 id="新建G2Line-vue单文件组件"><a href="#新建G2Line-vue单文件组件" class="headerlink" title="新建G2Line.vue单文件组件"></a>新建G2Line.vue单文件组件</h3><p>在components目录下新建G2Line.vue文件（当前是以线形图为例的组件）。<br>在template标签中新增标签<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;!--此处的id用变量，方便同一页面引用多次相同的组件--&gt;</div><div class="line">  &lt;div :id=<span class="string">"id"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>在script标签中引入G2并开始先关操作代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">import G2 from <span class="string">'g2'</span>;</div><div class="line">  <span class="built_in">export</span> default &#123;</div><div class="line">    <span class="function"><span class="title">data</span></span> () &#123;</div><div class="line">      <span class="built_in">return</span> &#123;</div><div class="line">        chart: null</div><div class="line">      &#125;;</div><div class="line">    &#125;,</div><div class="line">    props: &#123;</div><div class="line">      charData: &#123;</div><div class="line">        <span class="built_in">type</span>: Array,</div><div class="line">        default: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">          <span class="built_in">return</span> &#123;</div><div class="line">            data: [&#123;<span class="string">'mzkId'</span>: 112, <span class="string">'strftime'</span>: <span class="string">"2017-01-11"</span>, <span class="string">'value'</span>: 9275501&#125;,  // 测试数据，根据自己需求自己设置数据</div><div class="line">              &#123;<span class="string">'mzkId'</span>: 112, <span class="string">'strftime'</span>: <span class="string">"2017-01-12"</span>, <span class="string">'value'</span>: 9281904&#125;,</div><div class="line">              &#123;<span class="string">'mzkId'</span>: 112, <span class="string">'strftime'</span>: <span class="string">"2017-01-13"</span>, <span class="string">'value'</span>: 9290777&#125;,</div><div class="line">              &#123;<span class="string">'mzkId'</span>: 112, <span class="string">'strftime'</span>: <span class="string">"2017-01-14"</span>, <span class="string">'value'</span>: 9297913&#125;,</div><div class="line">              &#123;<span class="string">'mzkId'</span>: 112, <span class="string">'strftime'</span>: <span class="string">"2017-01-15"</span>, <span class="string">'value'</span>: 9306918&#125;,</div><div class="line">              &#123;<span class="string">'mzkId'</span>: 112, <span class="string">'strftime'</span>: <span class="string">"2017-01-16"</span>, <span class="string">'value'</span>: 9315641&#125;]</div><div class="line">          &#125;;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      id: String</div><div class="line">    &#125;,</div><div class="line">    mounted: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">//      this.drawChart();       // 第一步想到的是创建的时候更新图表，但是这个不适用于异步请求接口获取相关数据，所以采用下面的监听的方式</div><div class="line">    &#125;,</div><div class="line">    beforeUpdate: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">//      this.drawChart();</div><div class="line">    &#125;,</div><div class="line">    watch: &#123;</div><div class="line">      charData: <span class="keyword">function</span> (val, oldVal) &#123;    // 监听charData，当放生变化时，触发这个回调函数绘制图表</div><div class="line">        console.log(<span class="string">'new: %s, old: %s'</span>, val, oldVal);</div><div class="line">        this.drawChart(val);</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">      drawChart: <span class="keyword">function</span> (datas) &#123;</div><div class="line">        // 如果图形存在则删除再创建，这个地方感觉稍微有点坑</div><div class="line">        // 具体的G2 api函数说明请看上面提供的官网地址，此处不再逐一说明</div><div class="line">        this.chart &amp;&amp; this.chart.destroy();</div><div class="line">        <span class="built_in">let</span> data = datas;</div><div class="line">        this.chart = new G2.Chart(&#123;</div><div class="line">          id: this.id,</div><div class="line">          width: 1000,</div><div class="line">          height: 250</div><div class="line">        &#125;);</div><div class="line">        this.chart.source(data, &#123;</div><div class="line">          strftime: &#123;</div><div class="line">            <span class="built_in">alias</span>: <span class="string">'日期'</span>,</div><div class="line">            <span class="built_in">type</span>: <span class="string">'cat'</span>,</div><div class="line">            range: [0, 1]</div><div class="line">          &#125;,</div><div class="line">          value: &#123;</div><div class="line">            <span class="built_in">alias</span>: <span class="string">'数量值(人)'</span></div><div class="line">          &#125;</div><div class="line">        &#125;);</div><div class="line">        this.chart.line().position(<span class="string">'strftime*value'</span>).size(2);</div><div class="line">        this.chart.point().position(<span class="string">'strftime*value'</span>).color(<span class="string">'#757373'</span>)</div><div class="line">          .shape(<span class="string">'circle'</span>)</div><div class="line">          .label(<span class="string">'value'</span>, &#123;offset: 20, label: &#123;fill: <span class="string">'#000'</span>&#125;&#125;);</div><div class="line">        this.chart.animate(<span class="literal">false</span>);</div><div class="line">        this.chart.render();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h3 id="App-vue引入组件并渲染图表"><a href="#App-vue引入组件并渲染图表" class="headerlink" title="App.vue引入组件并渲染图表"></a>App.vue引入组件并渲染图表</h3><p>在app.vue中引入上一步新建的G2Line.vue组件，并加载到当前vue实例中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    import G2Line from <span class="string">'./components/G2Line.vue'</span>;</div><div class="line">    <span class="built_in">export</span> default &#123;</div><div class="line">        components: &#123;</div><div class="line">            G2Line</div><div class="line">        &#125;,</div><div class="line">        <span class="function"><span class="title">data</span></span> () &#123;</div><div class="line">            <span class="built_in">return</span> &#123;</div><div class="line">                serverData: []</div><div class="line">            &#125; </div><div class="line">        &#125;,</div><div class="line">        methods: &#123;</div><div class="line">            // 此处省略从服务器获取数据并且赋值给this.serverData</div><div class="line">            // 推荐使用axios请求接口</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>获取服务端数据之后，在template中创建组件标签，并将serverData发送给子组件G2Line<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!--同步设置id传送给子组件--&gt;</div><div class="line">&lt;g2-line :charData=<span class="string">"serverData"</span> :id=<span class="string">"'c1'"</span> id=<span class="string">"c1"</span>&gt;&lt;/g2-line&gt;</div></pre></td></tr></table></figure></p>
<h3 id="刷新界面，成功看到页面图表的渲染"><a href="#刷新界面，成功看到页面图表的渲染" class="headerlink" title="刷新界面，成功看到页面图表的渲染"></a>刷新界面，成功看到页面图表的渲染</h3><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/g2%E6%88%AA%E5%9B%BE.gif" alt="截图"><br><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/g2截图2.gif" alt="截图"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nodejs爬虫--抓取豆瓣电影网页数据（下）]]></title>
      <url>https://yezihaohao.github.io/2017/02/11/Nodejs%E7%88%AC%E8%99%AB-%E6%8A%93%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E7%BD%91%E9%A1%B5%E6%95%B0%E6%8D%AE%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>接着上篇 <a href="https://yezihaohao.github.io/2017/02/09/Nodejs%E7%88%AC%E8%99%AB-%E6%8A%93%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E7%BD%91%E9%A1%B5%E6%95%B0%E6%8D%AE%EF%BC%88%E4%B8%8A%EF%BC%89/">Nodejs爬虫–抓取豆瓣电影网页数据（上）</a><br>  本篇主要描述将上次抓取的数据存入mongodb数据库<br>  前提：百度或谷歌mongodb的安装教程，安装本地并成功运行<br>  推荐一款mongodb数据库可视化管理工具：Robomongo。可以加群264591039获取安装包或自行寻找资源</p>
</blockquote>
<h3 id="首先用npm安装第三方数据库操作包：mongoose"><a href="#首先用npm安装第三方数据库操作包：mongoose" class="headerlink" title="首先用npm安装第三方数据库操作包：mongoose."></a>首先用npm安装第三方数据库操作包：mongoose.</h3><p>关于mongoose详情请查看<a href="http://mongoosejs.com/index.html" target="_blank" rel="external">官方文档</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev mongoose</div></pre></td></tr></table></figure></p>
<h3 id="引入mongoose包开始对mongodb进行管理"><a href="#引入mongoose包开始对mongodb进行管理" class="headerlink" title="引入mongoose包开始对mongodb进行管理"></a>引入mongoose包开始对mongodb进行管理</h3><p>当前目录下新建一个mongo.js文件方便管理，在该文件中引入相关包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> mongoose = require(<span class="string">'mongoose'</span>),</div><div class="line">    assert = require(<span class="string">'assert'</span>);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="获取表构造器Schema并映射mongodb相应的collection"><a href="#获取表构造器Schema并映射mongodb相应的collection" class="headerlink" title="获取表构造器Schema并映射mongodb相应的collection"></a>获取表构造器Schema并映射mongodb相应的collection</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> Schema = mongoose.Schema;</div><div class="line"></div><div class="line"><span class="built_in">let</span> filmSchema = new Schema(&#123;       //自定义相应的表数据字段</div><div class="line">        title: String,</div><div class="line">        <span class="built_in">type</span>: String,</div><div class="line">        directories: String,</div><div class="line">        scriptwriter: String,</div><div class="line">        actors: String</div><div class="line">    &#125;);</div><div class="line">//映射collection并生成model对象用于管理数据表的增删改查</div><div class="line">//默认是映射到名为films的collection</div><div class="line">//若自定义表明则：<span class="built_in">let</span> filmSchema = new Schema(&#123;..&#125;, &#123; collection: <span class="string">'data'</span> &#125;);  <span class="string">'data'</span>即为自定义名称</div><div class="line"><span class="built_in">let</span> Film = mongoose.model(<span class="string">'Film'</span>, filmSchema);</div></pre></td></tr></table></figure>
<h3 id="连接mongodb数据库并exports-Film对象"><a href="#连接mongodb数据库并exports-Film对象" class="headerlink" title="连接mongodb数据库并exports Film对象"></a>连接mongodb数据库并exports Film对象</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> db = mongoose.connect(<span class="string">'mongodb://127.0.0.1:27017/spider'</span>);</div><div class="line">db.connection.on(<span class="string">'error'</span>, (err) =&gt; &#123;</div><div class="line">    console.log(`数据库连接失败：<span class="variable">$&#123;err&#125;</span>`);</div><div class="line">&#125;);</div><div class="line">db.connection.on(<span class="string">'open'</span>, () =&gt; &#123;</div><div class="line">    console.log(<span class="string">'数据库连接成功'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">module.exports = &#123;Film: Film&#125;;</div></pre></td></tr></table></figure>
<h3 id="在spider-js中引入Film对象并添加入库操作代码"><a href="#在spider-js中引入Film对象并添加入库操作代码" class="headerlink" title="在spider.js中引入Film对象并添加入库操作代码"></a>在spider.js中引入Film对象并添加入库操作代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> mongo = require(<span class="string">'./mongo'</span>);</div><div class="line">//在请求网页的end函数中添加入库操作</div><div class="line">xxxx.end((err, res) =&gt; &#123;</div><div class="line">    var $ = cheerio.load(res.text);     //用cheerio获取整个页面DOM对象</div><div class="line">    var _data = &#123;title:<span class="string">''</span>, <span class="built_in">type</span>: <span class="string">''</span>, directories: <span class="string">''</span>, scriptwriter: <span class="string">''</span>, actors: <span class="string">''</span>&#125;;</div><div class="line">    _data.title = $(<span class="string">'#content h1 span'</span>).text();</div><div class="line">    _data.directories = $(<span class="string">'#info .attrs'</span>).eq(0).text();</div><div class="line">    _data.scriptwriter = $(<span class="string">'#info .attrs'</span>).eq(1).text();</div><div class="line">    _data.actors = $(<span class="string">'#info .attrs'</span>).eq(2).text();</div><div class="line">    $(<span class="string">'span[property="v:genre"]'</span>).each(<span class="keyword">function</span> (index) &#123;</div><div class="line">        _data.type += ($(this).text() + (index == $(<span class="string">'span[property="v:genre"]'</span>).length - 1 ? <span class="string">''</span> : <span class="string">'、'</span>));</div><div class="line">    &#125;);</div><div class="line">    console.log(_data);</div><div class="line">    mongo.Film.create(_data, (err, doc) =&gt; &#123;</div><div class="line">                        assert.equal(err, null);</div><div class="line">                        console.log(doc);</div><div class="line">                    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="运行spider-js，并查看数据库中的数据"><a href="#运行spider-js，并查看数据库中的数据" class="headerlink" title="运行spider.js，并查看数据库中的数据"></a>运行spider.js，并查看数据库中的数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node spider.js</div><div class="line">//用上述提到的可视化工具查看数据库是否成功有数据入库</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/QQ%E6%88%AA%E5%9B%BE20170211120738.png" alt="数据库截图"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Javascript正则表达式整合]]></title>
      <url>https://yezihaohao.github.io/2017/02/10/Javascript%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%95%B4%E5%90%88/</url>
      <content type="html"><![CDATA[<h2 id="项目中常用正则表达式使用整合大全"><a href="#项目中常用正则表达式使用整合大全" class="headerlink" title="项目中常用正则表达式使用整合大全"></a>项目中常用正则表达式使用整合大全</h2><h3 id="提取网页标签内容"><a href="#提取网页标签内容" class="headerlink" title="提取网页标签内容"></a>提取网页标签内容</h3><h4 id="一-单个标签提取"><a href="#一-单个标签提取" class="headerlink" title="一.单个标签提取"></a>一.单个标签提取</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> str = `&lt;a class=<span class="string">"menu"</span>&gt;GitHub&lt;/a&gt;`;</div><div class="line"></div><div class="line"><span class="built_in">let</span> content = str.match(/&lt;a class=<span class="string">"menu"</span>&gt;([\s\S]+)&lt;\/a&gt;/)[1];</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="不定时更新中…"><a href="#不定时更新中…" class="headerlink" title="不定时更新中…"></a>不定时更新中…</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nodejs爬虫--抓取豆瓣电影网页数据（上）]]></title>
      <url>https://yezihaohao.github.io/2017/02/09/Nodejs%E7%88%AC%E8%99%AB-%E6%8A%93%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E7%BD%91%E9%A1%B5%E6%95%B0%E6%8D%AE%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>之前写了一个nodejs的开源爬虫小项目，补上博客详细解析下代码。</p>
<p><code>PS：</code>共有上下两篇，第一篇讲从网站上抓取数据，第二篇讲将抓取的数据存入mongodb数据库。</p>
<h2 id="我们快速开始吧"><a href="#我们快速开始吧" class="headerlink" title="我们快速开始吧"></a>我们快速开始吧</h2><h3 id="首先，安装nodejs，然后用npm工具初始化资源管理配置文件：package-json"><a href="#首先，安装nodejs，然后用npm工具初始化资源管理配置文件：package-json" class="headerlink" title="首先，安装nodejs，然后用npm工具初始化资源管理配置文件：package.json"></a>首先，安装nodejs，然后用npm工具初始化资源管理配置文件：package.json</h3><p>新建spider文件夹，在该文件夹下面初始化package.json<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure></p>
<h3 id="然后用npm安装相关库文件："><a href="#然后用npm安装相关库文件：" class="headerlink" title="然后用npm安装相关库文件："></a>然后用npm安装相关库文件：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev superagent cheerio eventproxy <span class="keyword">async</span></div></pre></td></tr></table></figure>
<p>在文件夹下面新建spider.js, 在文件中引入需要用到的nodejs模块如下(具体用法请查询网上相关资料)：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> superagent = <span class="built_in">require</span>(<span class="string">'superagent'</span>),     <span class="comment">//nodejs里面一个非常方便的客户端代理请求模块，支持get,post,put,delete等</span></div><div class="line">    cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>),           <span class="comment">//类似于jQuery的DOM操作模块，可以提取html中想要的信息</span></div><div class="line">    eventproxy = <span class="built_in">require</span>(<span class="string">'eventproxy'</span>),     <span class="comment">//控制异步请求并发，可以监听请求，使得某些请求完毕之后在发送请求</span></div><div class="line">    assert = <span class="built_in">require</span>(<span class="string">'assert'</span>),             <span class="comment">//异常抛出判断模块，assert.equal(err, null);  如果err不为null,则直接抛出异常</span></div><div class="line">    <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">'async'</span>);              <span class="comment">//控制请求并发连接数</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="用superagent请求豆瓣的某个接口，并把所有的页面链接放到一个数组里面，用eventproxy控制监听该请求结束之后才开始请求相应的详情页面。"><a href="#用superagent请求豆瓣的某个接口，并把所有的页面链接放到一个数组里面，用eventproxy控制监听该请求结束之后才开始请求相应的详情页面。" class="headerlink" title="用superagent请求豆瓣的某个接口，并把所有的页面链接放到一个数组里面，用eventproxy控制监听该请求结束之后才开始请求相应的详情页面。"></a>用superagent请求豆瓣的某个接口，并把所有的页面链接放到一个数组里面，用eventproxy控制监听该请求结束之后才开始请求相应的详情页面。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">superagent.get(URL)</div><div class="line">    .end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> _pageUrls = [];</div><div class="line">        res.body.forEach(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</div><div class="line">           _pageUrls.push(val.url);</div><div class="line">        &#125;);</div><div class="line">        ep.emit(<span class="string">'pageUrls'</span>, _pageUrls);   <span class="comment">//监听相关实例，完成之后告诉pageUrls</span></div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<h3 id="监听事件完成之后，执行请求相应的豆瓣电影详情页面-并用async控制请求的并发量，可以降低请求的频率和速度"><a href="#监听事件完成之后，执行请求相应的豆瓣电影详情页面-并用async控制请求的并发量，可以降低请求的频率和速度" class="headerlink" title="监听事件完成之后，执行请求相应的豆瓣电影详情页面.并用async控制请求的并发量，可以降低请求的频率和速度"></a>监听事件完成之后，执行请求相应的豆瓣电影详情页面.并用async控制请求的并发量，可以降低请求的频率和速度</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> ep = eventproxy.create(<span class="string">'pageUrls'</span>, (pageUrls) =&gt; &#123;      <span class="comment">//创建一个监听实例</span></div><div class="line">    <span class="keyword">let</span> _http = <span class="function">(<span class="params">url, callback</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> _delay = <span class="built_in">parseInt</span>((<span class="built_in">Math</span>.random() * <span class="number">30000000</span>) % <span class="number">1000</span>, <span class="number">10</span>);   <span class="comment">//随机延时请求</span></div><div class="line">        superagent.get(url)</div><div class="line">            .end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</div><div class="line">                <span class="keyword">var</span> $ = cheerio.load(res.text);     <span class="comment">//用cheerio获取整个页面DOM对象</span></div><div class="line">                <span class="keyword">var</span> _data = &#123;<span class="attr">title</span>:<span class="string">''</span>, <span class="attr">type</span>: <span class="string">''</span>, <span class="attr">directories</span>: <span class="string">''</span>, <span class="attr">scriptwriter</span>: <span class="string">''</span>, <span class="attr">actors</span>: <span class="string">''</span>&#125;;</div><div class="line">                _data.title = $(<span class="string">'#content h1 span'</span>).text();</div><div class="line">                _data.directories = $(<span class="string">'#info .attrs'</span>).eq(<span class="number">0</span>).text();</div><div class="line">                _data.scriptwriter = $(<span class="string">'#info .attrs'</span>).eq(<span class="number">1</span>).text();</div><div class="line">                _data.actors = $(<span class="string">'#info .attrs'</span>).eq(<span class="number">2</span>).text();</div><div class="line">                $(<span class="string">'span[property="v:genre"]'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</div><div class="line">                    _data.type += ($(<span class="keyword">this</span>).text() + (index == $(<span class="string">'span[property="v:genre"]'</span>).length - <span class="number">1</span> ? <span class="string">''</span> : <span class="string">'、'</span>));</div><div class="line">                &#125;);</div><div class="line">                <span class="built_in">console</span>.log(_data);</div><div class="line">            &#125;);</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            callback(<span class="literal">null</span>, url);</div><div class="line">        &#125;, _delay);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">async</span>.mapLimit(pageUrls, <span class="number">3</span>, (url, callback) =&gt; &#123;  <span class="comment">//用async 的 mapLimit(arr, limit, iterator, callback) 接口控制请求并发量为3</span></div><div class="line">        _http(url, callback);</div><div class="line">    &#125;, (err, res) =&gt; &#123;</div><div class="line">        assert.equal(err, <span class="literal">null</span>);</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="本章节结束，未完待续…下期是怎么将抓取的数据存入mongodb数据库！"><a href="#本章节结束，未完待续…下期是怎么将抓取的数据存入mongodb数据库！" class="headerlink" title="本章节结束，未完待续…下期是怎么将抓取的数据存入mongodb数据库！"></a>本章节结束，未完待续…下期是怎么将抓取的数据存入mongodb数据库！</h2>]]></content>
    </entry>
    
  
  
</search>
